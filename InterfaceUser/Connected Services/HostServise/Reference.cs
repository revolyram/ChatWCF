//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InterfaceUser.HostServise {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HostServise.IService_WCF", CallbackContract=typeof(InterfaceUser.HostServise.IService_WCFCallback))]
    public interface IService_WCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService_WCF/Connect", ReplyAction="http://tempuri.org/IService_WCF/ConnectResponse")]
        int Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService_WCF/Connect", ReplyAction="http://tempuri.org/IService_WCF/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService_WCF/DisConnect", ReplyAction="http://tempuri.org/IService_WCF/DisConnectResponse")]
        void DisConnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService_WCF/DisConnect", ReplyAction="http://tempuri.org/IService_WCF/DisConnectResponse")]
        System.Threading.Tasks.Task DisConnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService_WCF/Smsg")]
        void Smsg(string msg, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService_WCF/Smsg")]
        System.Threading.Tasks.Task SmsgAsync(string msg, int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService_WCFCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService_WCF/CallBackMSG")]
        void CallBackMSG(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService_WCFChannel : InterfaceUser.HostServise.IService_WCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service_WCFClient : System.ServiceModel.DuplexClientBase<InterfaceUser.HostServise.IService_WCF>, InterfaceUser.HostServise.IService_WCF {
        
        public Service_WCFClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service_WCFClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service_WCFClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service_WCFClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service_WCFClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void DisConnect(int id) {
            base.Channel.DisConnect(id);
        }
        
        public System.Threading.Tasks.Task DisConnectAsync(int id) {
            return base.Channel.DisConnectAsync(id);
        }
        
        public void Smsg(string msg, int id) {
            base.Channel.Smsg(msg, id);
        }
        
        public System.Threading.Tasks.Task SmsgAsync(string msg, int id) {
            return base.Channel.SmsgAsync(msg, id);
        }
    }
}
